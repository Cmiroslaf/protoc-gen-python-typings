#!/usr/bin/python3
import sys

from google.protobuf.compiler import plugin_pb2
from google.protobuf.descriptor_pb2 import FileDescriptorProto

from stubs_generator.code_parts import (ConstantPart, Constructor, ConstructorParameter, EnumValue,
                                        Field, File, Import, Message, NEW_LINE)
from stubs_generator.utils import before_every, before_if_not_empty, decode_type

DEFAULT_TAB_STR = '    '


def generate_message_stub(msg, parents=None) -> Message:
    """Generates the message recursively"""
    return Message(
        msg.name,
        parents or [],
        # Message enumerator values
        *[EnumValue(value.name, value.number)
          for enum in msg.enum_type
          for value in enum.value],
        # Nested messages
        *before_every(
            [NEW_LINE],
            *[generate_message_stub(nested_msg, (parents or []) + [msg.name])
              for nested_msg in msg.nested_type]),
        # Message fields
        *before_if_not_empty(
            [NEW_LINE],
            *[Field(decode_type(field), field.name)
              for field in msg.field]),
        Constructor(*[ConstructorParameter(decode_type(field), field.name)
                      for field in msg.field]),
    )


def generate_pb2_stub_file_content(proto_descriptor: FileDescriptorProto) -> str:
    """Generates typing stub file for messages"""
    return File(
        # Header for a file
        ConstantPart("""\
# ############################################################################# #
#  Automatically generated protobuf stub files for python                       #
#   by protoc-gen-python-typings plugin for protoc                              #
# ############################################################################# #

"""),
        # Typing imports
        Import("typing", ["List"]),
        NEW_LINE,
        # Global imports
        Import("google.protobuf.descriptor", ["FieldDescriptor"]),
        Import("google.protobuf.message", ["Message"]),
        *[Import("google.protobuf.internal.well_known_types", ["Timestamp"])
          if dependency == 'google/protobuf/timestamp.proto' else
          Import(dependency, ["*"])
          for dependency in proto_descriptor.dependency
          if dependency.startswith('google') and 'google/api/annotations.proto' != dependency],
        # Local imports
        *before_if_not_empty(
            [NEW_LINE],
            *[Import(dependency, ["*"])
              for dependency in proto_descriptor.dependency
              if not dependency.startswith('google')]),
        # Global enumerator values
        *before_if_not_empty(
            [NEW_LINE],
            *[EnumValue(value.name, value.number)
              for msg in proto_descriptor.enum_type
              for value in msg.value]),
        # Messages
        *before_every(
            [NEW_LINE, NEW_LINE],
            *[generate_message_stub(msg)
              for msg in proto_descriptor.message_type]),
    ).generate(0, DEFAULT_TAB_STR)


if __name__ == '__main__':
    # Read request message from stdin
    data = sys.stdin.buffer.read()

    # Parse request
    request = plugin_pb2.CodeGeneratorRequest()
    request.ParseFromString(data)

    # Create response
    response = plugin_pb2.CodeGeneratorResponse()

    for proto_file in request.proto_file:
        if proto_file.name in request.file_to_generate:
            response.file.add(
                name="{}_pb2.pyi".format(proto_file.name[:-6]),
                content=generate_pb2_stub_file_content(proto_file)
            )

    # Serialise response message
    output = response.SerializeToString()

    # Write to stdout
    sys.stdout.buffer.write(output)
