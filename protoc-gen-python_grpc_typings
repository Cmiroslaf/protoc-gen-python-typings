#!/usr/bin/python3
import sys

from google.protobuf.compiler import plugin_pb2
from google.protobuf.descriptor_pb2 import FileDescriptorProto

from stubs_generator.base import ConstantPart, NEW_LINE
from stubs_generator.messages import File, Import
from stubs_generator.servicers import AbstractMethod, Servicer, StubMethod, Stub, AddToServerMethod
from stubs_generator.utils import before_every, before_if_not_empty, decode_type

DEFAULT_TAB_STR = '    '


def generate_pb2_grpc_stub_file_content(proto_descriptor: FileDescriptorProto) -> str:
    """Generates typing stub file for messages"""
    return File(
        # Header for a file
        ConstantPart("""\
# ############################################################################# #
#  Automatically generated protobuf stub files for python                       #
#   by protoc-gen-python_grpc_typings plugin for protoc                         #
# ############################################################################# #

"""),
        # Typing imports
        Import("abc", ["ABC", "abstractmethod"]),
        Import("grpc", ["*"]),
        Import(".{}_pb2".format(proto_file.name[:-6]), ["*"]),
        NEW_LINE,
        # Global imports
        *[Import("google.protobuf.internal.well_known_types", ["Timestamp"])
          if dependency == 'google/protobuf/timestamp.proto' else
          Import(dependency, ["*"])
          for dependency in proto_descriptor.dependency
          if dependency.startswith('google') and 'google/api/annotations.proto' != dependency],
        # Local imports
        *before_if_not_empty(
            [NEW_LINE],
            *[Import(dependency, ["*"])
              for dependency in proto_descriptor.dependency
              if not dependency.startswith('google')]),
        # Stub servicer
        *before_every(
            [NEW_LINE, NEW_LINE],
            *[Stub(
                s.name,
                *[StubMethod(meth.name, decode_type(name=meth.input_type), decode_type(name=meth.output_type))
                  for meth in s.method]
            ) for s in proto_descriptor.service]
        ),
        # Abstract servicer
        *before_every(
            [NEW_LINE, NEW_LINE],
            *[Servicer(
                s.name,
                *[AbstractMethod(meth.name, decode_type(name=meth.input_type), decode_type(name=meth.output_type))
                  for meth in s.method]
            ) for s in proto_descriptor.service]
        ),
        *before_every(
            [NEW_LINE, NEW_LINE],
            *[AddToServerMethod(s.name)
              for s in proto_descriptor.service]
        )
    ).generate(0, DEFAULT_TAB_STR)


if __name__ == '__main__':
    # Read request message from stdin
    data = sys.stdin.buffer.read()

    # Parse request
    request = plugin_pb2.CodeGeneratorRequest()
    request.ParseFromString(data)

    # Create response
    response = plugin_pb2.CodeGeneratorResponse()

    for proto_file in request.proto_file:
        if proto_file.name in request.file_to_generate:
            response.file.add(
                name="{}_pb2_grpc.pyi".format(proto_file.name[:-6]),
                content=generate_pb2_grpc_stub_file_content(proto_file)
            )

    # Serialise response message
    output = response.SerializeToString()

    # Write to stdout
    sys.stdout.buffer.write(output)
